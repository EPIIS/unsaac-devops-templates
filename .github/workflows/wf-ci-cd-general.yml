name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      name:
        description: "App name"
        type: string
        required: false
      imagePort:
        description: "Container port"
        type: string
        required: false
      servicePort:
        description: "Service port"
        type: string
        required: false
      ingressPath:
        description: "Ingress path"
        type: string
        required: false
      user:
        description: "Server user"
        type: string
        default: "epiis"
        required: false

    secrets:
      SSH_PASSWORD:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_USER: ${{inputs.user}}
      REGISTRY: localhost:5000
      SERVER_HOST: 200.48.82.51
      SERVER_PATH: /home/${SERVER_USER}/devops/pipeline
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4

      - name: Clone external base chart repo
        run: |
          git clone https://github.com/EPIIS/unsaac-devops-templates.git
          cp -r helm-base-chart/_base charts/_base

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Copy base chart to project chart
        run: |
          NAME="${{ inputs.name }}"
          cp -r charts/_base charts/${NAME}

      - name: Setear versi√≥n de imagen (short SHA)
        run: echo "IMAGE_VERSION=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Replace values.yaml
        run: |
          NAME="${{ inputs.name }}"
          IMAGE_PORT="${{ inputs.imagePort }}"
          SERVICE_PORT="${{ inputs.servicePort }}"
          INGRESS_PATH="${{ inputs.ingressPath }}"
          IMAGE_VERSION=${{ env.IMAGE_VERSION }}

          VALUES_FILE="charts/${NAME}/values.yaml"

          yq eval -i "
            .namespace = \"${NAME}\" |
            .deployment.name = \"${NAME}-deployment\" |
            .deployment.namespace = \"${NAME}\" |
            .image.repository = \"localhost:5000/${NAME}\" |
            .image.tag = \"${IMAGE_VERSION}\" |
            .image.containerPort = ${IMAGE_PORT} |
            .service.name = \"${NAME}-service\" |
            .service.port = ${SERVICE_PORT} |
            .ingress.name = \"${NAME}-ingress\" |
            .ingress.path = \"${INGRESS_PATH}\" |
          " "$VALUES_FILE"

          cat "$VALUES_FILE"

      - name: Replace Chart.yaml
        run: |
          NAME="${{ inputs.name }}"
          CHART_FILE="charts/${NAME}/Chart.yaml"

          yq eval ".name = \"${NAME}\"" -i "$CHART_FILE"

          cat "$CHART_FILE"

      - name: Instalar sshpass
        run: sudo apt-get install -y sshpass

      - name: Build y save Docker image (solo frontend)
        run: |
          docker build -t $REGISTRY/${{ inputs.name }}:${{ env.IMAGE_VERSION }} .
          docker save -o ${{ inputs.name }}.tar $REGISTRY/${{ inputs.name }}:${{ env.IMAGE_VERSION }}

      - name: Transferir imagen y chart (solo frontend)
        run: |
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no ${{ inputs.name }}.tar $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no -r charts/${{ inputs.name }} $SERVER_USER@$SERVER_HOST:$SERVER_PATH/helm/

      - name: Load image on server and push to registry
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << EOF
            cd $SERVER_PATH
            echo "show image name env in EOF"
            echo "Image name: ${{ inputs.name }}"
            echo "Image version: ${{ inputs.name }}"
            echo "Image name with keys: ${{ inputs.name }}"
            docker load -i ${{ inputs.name }}.tar
            docker push $REGISTRY/${{ inputs.name }}:${{ env.IMAGE_VERSION }}
          EOF

      - name: Deploy with Helm on server
        env:
          IMAGE_NAME: ${{ inputs.name }}
          IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST bash << EOF
            set -e
          
            cd "$SERVER_PATH/helm/$IMAGE_NAME"
          
            # Extraer el namespace usando yq
            NAMESPACE=\$(yq eval '.namespace' values.yaml)
            echo "‚úÖ Namespace: \$NAMESPACE"
            echo "‚úÖ Image name: $IMAGE_NAME"
            echo "‚úÖ Image version: $IMAGE_VERSION"
          
            # Crear namespace si no existe
            if ! kubectl get namespace "\$NAMESPACE" >/dev/null 2>&1; then
              echo "üîß Creando namespace \$NAMESPACE"
              kubectl create namespace "\$NAMESPACE"
              kubectl label namespace "\$NAMESPACE" app.kubernetes.io/managed-by=Helm --overwrite
              kubectl annotate namespace "\$NAMESPACE" \
                meta.helm.sh/release-name="$IMAGE_NAME" \
                meta.helm.sh/release-namespace="\$NAMESPACE" --overwrite
          
              # Esperar hasta que el namespace est√© activo
              for i in {1..10}; do
                status=\$(kubectl get namespace "\$NAMESPACE" -o jsonpath='{.status.phase}')
                if [ "\$status" == "Active" ]; then
                  echo "‚úÖ Namespace \$NAMESPACE est√° activo"
                  break
                fi
                echo "‚è≥ Esperando a que el namespace est√© activo..."
                sleep 1
              done
            fi
          
            # Helm deploy
            helm upgrade --install "$IMAGE_NAME" . \
              --namespace "\$NAMESPACE" \
              --set image.tag="$IMAGE_VERSION"
          EOF


#      ### FULLSTACK
#      - name: Build y save Docker image (frontend y backend)
#        if: inputs.project_type == 'fullstack'
#        run: |
#          docker build -t $REGISTRY/${{ inputs.frontend_name }}:${{ env.IMAGE_VERSION }} ./frontend
#          docker save -o ${{ inputs.frontend_name }}.tar $REGISTRY/${{ inputs.frontend_name }}:${{ env.IMAGE_VERSION }}
#          docker build -t $REGISTRY/${{ inputs.backend_name }}:${{ env.IMAGE_VERSION }} ./backend
#          docker save -o ${{ inputs.backend_name }}.tar $REGISTRY/${{ inputs.backend_name }}:${{ env.IMAGE_VERSION }}
#
#      - name: Transferir charts e im√°genes (fullstack)
#        if: inputs.project_type == 'fullstack'
#        run: |
#          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no ${{ inputs.frontend_name }}.tar ${{ inputs.backend_name }}.tar epiis@200.48.82.51:/home/epiis/devops/pipeline/
#          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no -r charts/${{ inputs.frontend_name }} charts/${{ inputs.backend_name }} epiis@200.48.82.51:/home/epiis/devops/pipeline/helm/
#
#      - name: Modificar charts (fullstack)
#        if: inputs.project_type == 'fullstack'
#        run: |
#          for app in frontend backend; do
#            NAME_VAR="\${{ inputs["${app}_name"] }}"
#            PORT_VAR="\${{ inputs["${app}_port"] }}"
#            PATH_VAR="\${{ inputs["${app}_path"] }}"
#            sed -i "s/^namespace:.*/namespace: ${{ inputs.name }}/" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  name: .*/  name: \$NAME_VAR-deployment/" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  namespace: .*/  namespace: ${{ inputs.project_name }}/" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  name: .*/  name: \$NAME_VAR-service/" charts/\$NAME_VAR/values.yaml
#            sed -i "s|^  path: .*|  path: /\$PATH_VAR|" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  name: .*/  name: \$NAME_VAR/" charts/\$NAME_VAR/values.yaml
#            sed -i "s|^  repository: .*|  repository: localhost:5000/\$NAME_VAR|" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  tag: .*/  tag: ${{ env.IMAGE_VERSION }}/" charts/\$NAME_VAR/values.yaml
#            sed -i "s/^  containerPort: .*/  containerPort: \$PORT_VAR/" charts/\$NAME_VAR/values.yaml
#          done
#
#      - name: Desplegar Helm (fullstack)
#        if: inputs.project_type == 'fullstack'
#        run: |
#          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no epiis@200.48.82.51 << EOF
#            NAMESPACE=${{ inputs.project_name }}
#            if ! kubectl get namespace \$NAMESPACE >/dev/null 2>&1; then
#              kubectl create namespace \$NAMESPACE
#              kubectl label namespace \$NAMESPACE app.kubernetes.io/managed-by=Helm --overwrite
#              kubectl annotate namespace \$NAMESPACE \
#                meta.helm.sh/release-name=\$NAMESPACE \
#                meta.helm.sh/release-namespace=\$NAMESPACE --overwrite
#            fi
#            cd /home/epiis/devops/pipeline
#            docker load -i ${{ inputs.frontend_name }}.tar
#            docker load -i ${{ inputs.backend_name }}.tar
#            docker push localhost:5000/${{ inputs.frontend_name }}:${{ env.IMAGE_VERSION }}
#            docker push localhost:5000/${{ inputs.backend_name }}:${{ env.IMAGE_VERSION }}
#            helm upgrade --install ${{ inputs.frontend_name }} ./helm/${{ inputs.frontend_name }} --namespace \$NAMESPACE --set image.tag=${{ env.IMAGE_VERSION }}
#            helm upgrade --install ${{ inputs.backend_name }} ./helm/${{ inputs.backend_name }} --namespace \$NAMESPACE --set image.tag=${{ env.IMAGE_VERSION }}
#          EOF
